// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: product.sql

package db

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products(
	product_name, supplier_id, category_id, quantity_per_unit, unit_price, units_in_stock, units_on_order, reorder_level, discontinued,product_image)
	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9,$10)
	RETURNING product_id, product_name, supplier_id, category_id, quantity_per_unit, unit_price, units_in_stock, units_on_order, reorder_level, discontinued, product_image
`

type CreateProductParams struct {
	ProductName     string   `json:"product_name"`
	SupplierID      *int16   `json:"supplier_id"`
	CategoryID      *int16   `json:"category_id"`
	QuantityPerUnit *string  `json:"quantity_per_unit"`
	UnitPrice       *float32 `json:"unit_price"`
	UnitsInStock    *int16   `json:"units_in_stock"`
	UnitsOnOrder    *int16   `json:"units_on_order"`
	ReorderLevel    *int16   `json:"reorder_level"`
	Discontinued    int32    `json:"discontinued"`
	ProductImage    *string  `json:"product_image"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (*Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.ProductName,
		arg.SupplierID,
		arg.CategoryID,
		arg.QuantityPerUnit,
		arg.UnitPrice,
		arg.UnitsInStock,
		arg.UnitsOnOrder,
		arg.ReorderLevel,
		arg.Discontinued,
		arg.ProductImage,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.SupplierID,
		&i.CategoryID,
		&i.QuantityPerUnit,
		&i.UnitPrice,
		&i.UnitsInStock,
		&i.UnitsOnOrder,
		&i.ReorderLevel,
		&i.Discontinued,
		&i.ProductImage,
	)
	return &i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
	WHERE product_id=$1
    RETURNING product_id, product_name, supplier_id, category_id, quantity_per_unit, unit_price, units_in_stock, units_on_order, reorder_level, discontinued, product_image
`

func (q *Queries) DeleteProduct(ctx context.Context, productID int16) error {
	_, err := q.db.Exec(ctx, deleteProduct, productID)
	return err
}

const findAllProduct = `-- name: FindAllProduct :many
SELECT product_id, product_name, supplier_id, 
category_id, quantity_per_unit, unit_price, 
units_in_stock, units_on_order, reorder_level, discontinued,product_image
	FROM products
`

func (q *Queries) FindAllProduct(ctx context.Context) ([]*Product, error) {
	rows, err := q.db.Query(ctx, findAllProduct)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.ProductName,
			&i.SupplierID,
			&i.CategoryID,
			&i.QuantityPerUnit,
			&i.UnitPrice,
			&i.UnitsInStock,
			&i.UnitsOnOrder,
			&i.ReorderLevel,
			&i.Discontinued,
			&i.ProductImage,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllProductPaging = `-- name: FindAllProductPaging :many
SELECT product_id, product_name, supplier_id, 
category_id, quantity_per_unit, unit_price, 
units_in_stock, units_on_order, reorder_level, discontinued,product_image
FROM products
ORDER BY product_id
LIMIT $1 OFFSET $2
`

type FindAllProductPagingParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) FindAllProductPaging(ctx context.Context, arg FindAllProductPagingParams) ([]*Product, error) {
	rows, err := q.db.Query(ctx, findAllProductPaging, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.ProductName,
			&i.SupplierID,
			&i.CategoryID,
			&i.QuantityPerUnit,
			&i.UnitPrice,
			&i.UnitsInStock,
			&i.UnitsOnOrder,
			&i.ReorderLevel,
			&i.Discontinued,
			&i.ProductImage,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findProductById = `-- name: FindProductById :one
SELECT product_id, product_name, supplier_id, 
category_id, quantity_per_unit, unit_price, 
units_in_stock, units_on_order, reorder_level, discontinued,
product_image 
FROM products WHERE product_id =$1
`

func (q *Queries) FindProductById(ctx context.Context, productID int16) (*Product, error) {
	row := q.db.QueryRow(ctx, findProductById, productID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.SupplierID,
		&i.CategoryID,
		&i.QuantityPerUnit,
		&i.UnitPrice,
		&i.UnitsInStock,
		&i.UnitsOnOrder,
		&i.ReorderLevel,
		&i.Discontinued,
		&i.ProductImage,
	)
	return &i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
	SET  product_name=$1, supplier_id=$2, category_id=$3, 
	quantity_per_unit=$4, unit_price=$5, units_in_stock=$6, 
	units_on_order=$7, reorder_level=$8, discontinued=$9,product_image=$10
	WHERE product_id=$11
	RETURNING product_id, product_name, supplier_id, category_id, quantity_per_unit, unit_price, units_in_stock, units_on_order, reorder_level, discontinued, product_image
`

type UpdateProductParams struct {
	ProductName     string   `json:"product_name"`
	SupplierID      *int16   `json:"supplier_id"`
	CategoryID      *int16   `json:"category_id"`
	QuantityPerUnit *string  `json:"quantity_per_unit"`
	UnitPrice       *float32 `json:"unit_price"`
	UnitsInStock    *int16   `json:"units_in_stock"`
	UnitsOnOrder    *int16   `json:"units_on_order"`
	ReorderLevel    *int16   `json:"reorder_level"`
	Discontinued    int32    `json:"discontinued"`
	ProductImage    *string  `json:"product_image"`
	ProductID       int16    `json:"product_id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (*Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ProductName,
		arg.SupplierID,
		arg.CategoryID,
		arg.QuantityPerUnit,
		arg.UnitPrice,
		arg.UnitsInStock,
		arg.UnitsOnOrder,
		arg.ReorderLevel,
		arg.Discontinued,
		arg.ProductImage,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.SupplierID,
		&i.CategoryID,
		&i.QuantityPerUnit,
		&i.UnitPrice,
		&i.UnitsInStock,
		&i.UnitsOnOrder,
		&i.ReorderLevel,
		&i.Discontinued,
		&i.ProductImage,
	)
	return &i, err
}
