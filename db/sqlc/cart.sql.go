// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: cart.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCart = `-- name: CreateCart :one
INSERT INTO carts(
	customer_id,product_id,unit_price,qty,cart_created_on)
	VALUES ($1, $2, $3, $4, $5)
	RETURNING cart_id, customer_id, product_id, unit_price, qty, cart_created_on
`

type CreateCartParams struct {
	CustomerID    string      `json:"customer_id"`
	ProductID     int32       `json:"product_id"`
	UnitPrice     *float32    `json:"unit_price"`
	Qty           *int32      `json:"qty"`
	CartCreatedOn pgtype.Date `json:"cart_created_on"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (*Cart, error) {
	row := q.db.QueryRow(ctx, createCart,
		arg.CustomerID,
		arg.ProductID,
		arg.UnitPrice,
		arg.Qty,
		arg.CartCreatedOn,
	)
	var i Cart
	err := row.Scan(
		&i.CartID,
		&i.CustomerID,
		&i.ProductID,
		&i.UnitPrice,
		&i.Qty,
		&i.CartCreatedOn,
	)
	return &i, err
}

const deleteCart = `-- name: DeleteCart :exec
DELETE FROM carts
	WHERE cart_id=$1
    RETURNING cart_id, customer_id, product_id, unit_price, qty, cart_created_on
`

func (q *Queries) DeleteCart(ctx context.Context, cartID int32) error {
	_, err := q.db.Exec(ctx, deleteCart, cartID)
	return err
}

const findCartByCustomerAndProduct = `-- name: FindCartByCustomerAndProduct :one
SELECT cart_id,customer_id,product_id,unit_price,qty,(unit_price*qty)::decimal(18,2) as price,cart_created_on 
FROM carts WHERE customer_id=$1 and product_id=$2 LIMIT 1
`

type FindCartByCustomerAndProductParams struct {
	CustomerID string `json:"customer_id"`
	ProductID  int32  `json:"product_id"`
}

type FindCartByCustomerAndProductRow struct {
	CartID        int32          `json:"cart_id"`
	CustomerID    string         `json:"customer_id"`
	ProductID     int32          `json:"product_id"`
	UnitPrice     *float32       `json:"unit_price"`
	Qty           *int32         `json:"qty"`
	Price         pgtype.Numeric `json:"price"`
	CartCreatedOn pgtype.Date    `json:"cart_created_on"`
}

func (q *Queries) FindCartByCustomerAndProduct(ctx context.Context, arg FindCartByCustomerAndProductParams) (*FindCartByCustomerAndProductRow, error) {
	row := q.db.QueryRow(ctx, findCartByCustomerAndProduct, arg.CustomerID, arg.ProductID)
	var i FindCartByCustomerAndProductRow
	err := row.Scan(
		&i.CartID,
		&i.CustomerID,
		&i.ProductID,
		&i.UnitPrice,
		&i.Qty,
		&i.Price,
		&i.CartCreatedOn,
	)
	return &i, err
}

const findCartByCustomerId = `-- name: FindCartByCustomerId :many
select cart_id,cu.customer_id,company_name,pr.product_id,product_name,cr.unit_price,
cr.unit_price,qty,(cr.unit_price*cr.qty)::decimal(18,2) as price,cart_created_on 
from carts cr 
join customers cu on cr.customer_id=cu.customer_id
join products pr on cr.product_id=pr.product_id
where cu.customer_id=$1
`

type FindCartByCustomerIdRow struct {
	CartID        int32          `json:"cart_id"`
	CustomerID    string         `json:"customer_id"`
	CompanyName   string         `json:"company_name"`
	ProductID     int16          `json:"product_id"`
	ProductName   string         `json:"product_name"`
	UnitPrice     *float32       `json:"unit_price"`
	UnitPrice_2   *float32       `json:"unit_price_2"`
	Qty           *int32         `json:"qty"`
	Price         pgtype.Numeric `json:"price"`
	CartCreatedOn pgtype.Date    `json:"cart_created_on"`
}

func (q *Queries) FindCartByCustomerId(ctx context.Context, customerID string) ([]*FindCartByCustomerIdRow, error) {
	rows, err := q.db.Query(ctx, findCartByCustomerId, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*FindCartByCustomerIdRow
	for rows.Next() {
		var i FindCartByCustomerIdRow
		if err := rows.Scan(
			&i.CartID,
			&i.CustomerID,
			&i.CompanyName,
			&i.ProductID,
			&i.ProductName,
			&i.UnitPrice,
			&i.UnitPrice_2,
			&i.Qty,
			&i.Price,
			&i.CartCreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCartByCustomerPaging = `-- name: FindCartByCustomerPaging :many
SELECT cart_id,customer_id,product_id,unit_price,qty,(unit_price*qty)::decimal(18,2) as price,cart_created_on
FROM carts
WHERE customer_id=$1
ORDER BY cart_id
LIMIT $2 OFFSET $3
`

type FindCartByCustomerPagingParams struct {
	CustomerID string `json:"customer_id"`
	Limit      int32  `json:"limit"`
	Offset     int32  `json:"offset"`
}

type FindCartByCustomerPagingRow struct {
	CartID        int32          `json:"cart_id"`
	CustomerID    string         `json:"customer_id"`
	ProductID     int32          `json:"product_id"`
	UnitPrice     *float32       `json:"unit_price"`
	Qty           *int32         `json:"qty"`
	Price         pgtype.Numeric `json:"price"`
	CartCreatedOn pgtype.Date    `json:"cart_created_on"`
}

func (q *Queries) FindCartByCustomerPaging(ctx context.Context, arg FindCartByCustomerPagingParams) ([]*FindCartByCustomerPagingRow, error) {
	rows, err := q.db.Query(ctx, findCartByCustomerPaging, arg.CustomerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*FindCartByCustomerPagingRow
	for rows.Next() {
		var i FindCartByCustomerPagingRow
		if err := rows.Scan(
			&i.CartID,
			&i.CustomerID,
			&i.ProductID,
			&i.UnitPrice,
			&i.Qty,
			&i.Price,
			&i.CartCreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartQty = `-- name: UpdateCartQty :one
UPDATE carts
	SET qty=$1
	WHERE cart_id=$2
	RETURNING cart_id, customer_id, product_id, unit_price, qty, cart_created_on
`

type UpdateCartQtyParams struct {
	Qty    *int32 `json:"qty"`
	CartID int32  `json:"cart_id"`
}

func (q *Queries) UpdateCartQty(ctx context.Context, arg UpdateCartQtyParams) (*Cart, error) {
	row := q.db.QueryRow(ctx, updateCartQty, arg.Qty, arg.CartID)
	var i Cart
	err := row.Scan(
		&i.CartID,
		&i.CustomerID,
		&i.ProductID,
		&i.UnitPrice,
		&i.Qty,
		&i.CartCreatedOn,
	)
	return &i, err
}
