// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: order.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders(
	 customer_id, employee_id, order_date, required_date, 
	shipped_date, ship_via, freight, ship_name,
	ship_address, ship_city, ship_region, ship_postal_code, ship_country)
	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9,$10,$11,$12,$13)
	RETURNING order_id, customer_id, employee_id, order_date, required_date, shipped_date, ship_via, freight, ship_name, ship_address, ship_city, ship_region, ship_postal_code, ship_country
`

type CreateOrderParams struct {
	CustomerID     *string     `json:"customer_id"`
	EmployeeID     *int16      `json:"employee_id"`
	OrderDate      pgtype.Date `json:"order_date"`
	RequiredDate   pgtype.Date `json:"required_date"`
	ShippedDate    pgtype.Date `json:"shipped_date"`
	ShipVia        *int16      `json:"ship_via"`
	Freight        *float32    `json:"freight"`
	ShipName       *string     `json:"ship_name"`
	ShipAddress    *string     `json:"ship_address"`
	ShipCity       *string     `json:"ship_city"`
	ShipRegion     *string     `json:"ship_region"`
	ShipPostalCode *string     `json:"ship_postal_code"`
	ShipCountry    *string     `json:"ship_country"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (*Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.CustomerID,
		arg.EmployeeID,
		arg.OrderDate,
		arg.RequiredDate,
		arg.ShippedDate,
		arg.ShipVia,
		arg.Freight,
		arg.ShipName,
		arg.ShipAddress,
		arg.ShipCity,
		arg.ShipRegion,
		arg.ShipPostalCode,
		arg.ShipCountry,
	)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.CustomerID,
		&i.EmployeeID,
		&i.OrderDate,
		&i.RequiredDate,
		&i.ShippedDate,
		&i.ShipVia,
		&i.Freight,
		&i.ShipName,
		&i.ShipAddress,
		&i.ShipCity,
		&i.ShipRegion,
		&i.ShipPostalCode,
		&i.ShipCountry,
	)
	return &i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
	WHERE order_id=$1
    RETURNING order_id, customer_id, employee_id, order_date, required_date, shipped_date, ship_via, freight, ship_name, ship_address, ship_city, ship_region, ship_postal_code, ship_country
`

func (q *Queries) DeleteOrder(ctx context.Context, orderID int16) error {
	_, err := q.db.Exec(ctx, deleteOrder, orderID)
	return err
}

const findAllOrder = `-- name: FindAllOrder :many
SELECT order_id, customer_id, employee_id, order_date, 
required_date, shipped_date, ship_via, freight, ship_name,
ship_address, ship_city, ship_region, ship_postal_code, ship_country
FROM orders
`

func (q *Queries) FindAllOrder(ctx context.Context) ([]*Order, error) {
	rows, err := q.db.Query(ctx, findAllOrder)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderID,
			&i.CustomerID,
			&i.EmployeeID,
			&i.OrderDate,
			&i.RequiredDate,
			&i.ShippedDate,
			&i.ShipVia,
			&i.Freight,
			&i.ShipName,
			&i.ShipAddress,
			&i.ShipCity,
			&i.ShipRegion,
			&i.ShipPostalCode,
			&i.ShipCountry,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOrderById = `-- name: FindOrderById :one
SELECT order_id, customer_id, employee_id, order_date, 
required_date, shipped_date, ship_via, freight, ship_name,
ship_address, ship_city, ship_region, ship_postal_code, ship_country
FROM orders where order_id=$1
`

func (q *Queries) FindOrderById(ctx context.Context, orderID int16) (*Order, error) {
	row := q.db.QueryRow(ctx, findOrderById, orderID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.CustomerID,
		&i.EmployeeID,
		&i.OrderDate,
		&i.RequiredDate,
		&i.ShippedDate,
		&i.ShipVia,
		&i.Freight,
		&i.ShipName,
		&i.ShipAddress,
		&i.ShipCity,
		&i.ShipRegion,
		&i.ShipPostalCode,
		&i.ShipCountry,
	)
	return &i, err
}

const updateOrderShip = `-- name: UpdateOrderShip :one
UPDATE orders
	SET ship_name=$1
	WHERE order_id=$2
	RETURNING order_id, customer_id, employee_id, order_date, required_date, shipped_date, ship_via, freight, ship_name, ship_address, ship_city, ship_region, ship_postal_code, ship_country
`

type UpdateOrderShipParams struct {
	ShipName *string `json:"ship_name"`
	OrderID  int16   `json:"order_id"`
}

func (q *Queries) UpdateOrderShip(ctx context.Context, arg UpdateOrderShipParams) (*Order, error) {
	row := q.db.QueryRow(ctx, updateOrderShip, arg.ShipName, arg.OrderID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.CustomerID,
		&i.EmployeeID,
		&i.OrderDate,
		&i.RequiredDate,
		&i.ShippedDate,
		&i.ShipVia,
		&i.Freight,
		&i.ShipName,
		&i.ShipAddress,
		&i.ShipCity,
		&i.ShipRegion,
		&i.ShipPostalCode,
		&i.ShipCountry,
	)
	return &i, err
}
